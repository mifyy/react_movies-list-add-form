{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","formSubmitted","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","setFormSubmitted","validForm","trim","onSubmit","preventDefault","disabled","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.710b140f.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  formSubmitted?: boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  formSubmitted,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value && !formSubmitted;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Props } from '../../types/Movie';\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const validForm = () => {\n    return (\n      title.trim() !== ''\n      && imgUrl.trim() !== ''\n      && imdbUrl.trim() !== ''\n      && imdbId.trim() !== ''\n    );\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (validForm()) {\n      onAdd({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n\n      setCount(count + 1);\n      setFormSubmitted(true);\n      setDescription('');\n      setTitle('');\n      setImgUrl('');\n      setImdbUrl('');\n      setImdbId('');\n    }\n  };\n\n  return (\n    <form className=\"NewMovie\" onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={\n          (value) => setTitle(value)\n        }\n        required\n        formSubmitted={formSubmitted}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={\n          (value) => setDescription(value)\n        }\n        formSubmitted={formSubmitted}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={\n          (value) => setImgUrl(value)\n        }\n        required\n        formSubmitted={formSubmitted}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={\n          (value) => setImdbUrl(value)\n        }\n        required\n        formSubmitted={formSubmitted}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={\n          (value) => setImdbId(value)\n        }\n        required\n        formSubmitted={formSubmitted}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!validForm()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesFromServer} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={() => {}} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}